{
	"info": {
		"_postman_id": "1f90e0b6-516d-4e94-92df-f0f0b6f889a1",
		"name": "Postman_HW3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18546145"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp = pm.response.json()\r",
							"\r",
							"pm.test(\"Check that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"token\", resp.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "AlenaKuts",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/login",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData = pm.response.json();\r",
							"let reqData = JSON.parse(request.data);\r",
							"\r",
							"//1. Статус код 200\r",
							"pm.test(\"Check that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Проверка структуры json в ответе.\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"person\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"        \"u_age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"            {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"            ],\r",
							"            \"minItems\": 3,\r",
							"            \"maxItems\": 3\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"        },\r",
							"        \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"        ],\r",
							"        \"additionalProperties\": false\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"        \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"        \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"        \"type\": \"integer\"\r",
							"    }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Check returning valid scheme\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Check start_qa_salary value\", function() {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(reqData.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_6_months value\", function() {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqData.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months value\", function() {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqData.salary * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year value\", function() {\r",
							"    pm.expect(respData.person.u_salary_1_5_year).to.eql(reqData.salary * 4);\r",
							"});\r",
							"\r",
							"//4.Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005 get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", respData.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\":33,\r\n\"salary\":500,\r\n\"name\": \"Alena\",\r\n\"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ip_port}}/user_info",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData = pm.response.json()\r",
							"let reqData = request.data\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Check that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"   \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"        ],\r",
							"        \"minItems\": 3,\r",
							"        \"maxItems\": 3\r",
							"    }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Check returning valid scheme\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"resp_salary_0 = respData.salary[0]\r",
							"resp_salary_1 = +respData.salary[1]\r",
							"resp_salary_2 = +respData.salary[2]\r",
							"req_salary = +reqData.salary \r",
							"\r",
							"\r",
							"pm.test(\"Check the value of the 0 element of an array\", function() {\r",
							"    pm.expect(resp_salary_0).to.eql(req_salary)\r",
							"});\r",
							"\r",
							"pm.test(\"Check the value of the 1st element of an array\", function() {\r",
							"    pm.expect(resp_salary_1).to.eql(req_salary * 2)\r",
							"});\r",
							"\r",
							"pm.test(\"Check the value of the 2nd element of an array\", function() {\r",
							"    pm.expect(resp_salary_2).to.eql(req_salary * 3)\r",
							"});\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Check the value of the 2nd element greate than 1st and 0th\", function() {\r",
							"    pm.expect(resp_salary_2).greaterThan(resp_salary_0);\r",
							"    pm.expect(resp_salary_2).greaterThan(resp_salary_1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2500",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/new_data",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData = pm.response.json()\r",
							"let reqData = request.data\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Check that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"        \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"        \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"        \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"        \"type\": \"string\"\r",
							"    }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"    ],\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Check returning valid scheme\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Check daily_food value\", function() {\r",
							"    pm.expect(respData.daily_food).to.eql(reqData.weight * 0.012)\r",
							"})\r",
							"\r",
							"pm.test(\"Check daily_sleep value\", function() {\r",
							"    pm.expect(respData.daily_sleep).to.eql(reqData.weight * 2.5)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alena",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "60",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/test_pet_info",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData = pm.response.json()\r",
							"let reqData = request.data\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Check that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"const schema = \r",
							"{ \r",
							"\"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }],\r",
							"            \"minItems\": 2,\r",
							"            \"maxItems\": 2\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }],\r",
							"            \"minItems\": 2,\r",
							"            \"maxItems\": 2\r",
							"            }],\r",
							"        \"minItems\": 2,\r",
							"        \"maxItems\": 2\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"        },\r",
							"        \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"age\",\r",
							"    \"salary\",\r",
							"    \"family\"\r",
							"  ],\r",
							"  \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Check returning valid scheme\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.test(\"Check name value\", function() {\r",
							"    pm.expect(respData.name).to.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Check age value\", function() {\r",
							"    pm.expect(respData.age).to.eql(reqData.age)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/get_test_user",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1)взять любой объект из присланного списка, используйте js random.\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"let respData = pm.response.json();\r",
							"\r",
							"function getRandomInt() {\r",
							"  return Math.floor(Math.random() * respData.length);\r",
							"}\r",
							"\r",
							"let randomObject = respData[getRandomInt()]\r",
							"pm.environment.set(\"Cur_ID\", randomObject.Cur_ID)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Check that status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"        \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"        \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"        \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"        \"type\": \"string\"\r",
							"    }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"    ], \r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Check returning valid scheme\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) получить список валют\r",
							"//2) итерировать список валют\r",
							"//3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"//4) если возвращается 500 код, переходим к следующей итреации\r",
							"//5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"//6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"//7) переходим к следующей итерации\r",
							"let respData = pm.response.json();\r",
							"\r",
							"for(i of respData) {\r",
							"    pm.sendRequest({\r",
							"        url: \"http://54.157.99.22:80/curr_byn\",\r",
							"        method: \"POST\",\r",
							"        \r",
							"        body: {\r",
							"            mode: \"formdata\",\r",
							"            formdata: [\r",
							"                {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"                {key: \"curr_code\", value: String(i.Cur_ID) }\r",
							"            ]\r",
							"        }\r",
							"    }, (error, resp) => {\r",
							"        if (resp.code === 500) {\r",
							"            return\r",
							"        }\r",
							"        else if (resp.code === 200) {\r",
							"        if (resp.json().hasOwnProperty(\"Cur_OfficialRate\")) {\r",
							"            console.log(resp.json())\r",
							"            }\r",
							"        }\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}