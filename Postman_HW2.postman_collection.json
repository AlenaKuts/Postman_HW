{
	"info": {
		"_postman_id": "ea1f7f3c-7902-4f44-ac90-6365e23f9de3",
		"name": "Postman_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18546145"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Check that body contains correct stringe\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/first",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"let resp_name = resp.name\r",
							"let resp_age = +resp.age\r",
							"let resp_salary = resp.salary\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"Check name value\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Tatiana\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"Check age value\", function () {\r",
							"    pm.expect(resp_age).to.eql(32);\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Check salary value\", function () {\r",
							"    pm.expect(resp_salary).to.eql(2500);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"let req_name = req.name\r",
							"let req_age = +req.age\r",
							"let req_salary = +req.salary\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name value. Compare with request data\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Check age value. Compare with request data\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary value. Compare with request data\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"})\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var resp_salary_1_5_year = resp.family.u_salary_1_5_year\r",
							"pm.test(\"Check salary_1_5_year value\", function () {\r",
							"    pm.expect(resp_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tatiana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_3",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"let resp_name = resp.name\r",
							"let resp_age = +resp.age\r",
							"let resp_salary = resp.salary\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"let req_name = req.name\r",
							"let req_age = +req.age\r",
							"let req_salary = +req.salary\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name value\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Check age value\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary value\", function () {\r",
							"    pm.expect(req_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check exist dog.name\", function() {\r",
							"   pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check exist dog.age\", function() {\r",
							"   pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog.name value\", function() {\r",
							"   pm.expect(resp.family.pets.dog.name).eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog.age value\", function() {\r",
							"   pm.expect(resp.family.pets.dog.age).eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/object_info_3?name=Olga&age=45&salary=1700",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "1700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"let resp_name = resp.name\r",
							"let resp_age = +resp.age\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"let req_name = req.name\r",
							"let req_age = +req.age\r",
							"let req_salary = +req.salary\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name value\", function() {\r",
							"    pm.expect(resp_name).eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Check name value\", function() {\r",
							"    pm.expect(resp_age).eql(req_age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from response: \" + resp.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary from request: \" + req.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary_0 from response: \" + resp.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_1 from response: \" + resp.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_2 from response: \" + resp.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check Salary_0 value\", function() {\r",
							"    pm.expect(resp.salary[0]).eql(req_salary)\r",
							"})\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check Salary_1 value\", function() {\r",
							"    pm.expect(+resp.salary[1]).eql(req_salary*2)\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Check Salary_1 value\", function() {\r",
							"    pm.expect(+resp.salary[2]).eql(req_salary*3)\r",
							"})\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_name)\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_age)\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary[0])\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i in resp.salary) {\r",
							"    console.log(\"Salary_\" +i + \" from loop1: \" + resp.salary[i])\r",
							"}\r",
							"\r",
							"for (var i = 0; i < resp.salary.length; i++) {\r",
							"    console.log(\"Salary_\" +i + \" from loop2: \" + resp.salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{ip_port}}/object_info_4?name=Inna&age=28&salary=1111",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Inna"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"let req_salary = +req.salary\r",
							"let req_age = +req.age\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check if start_qa_salary exists\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check if qa_salary_after_6_months exists\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check if qa_salary_after_12_months exists\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check if qa_salary_after_1.5_year exists\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check if qa_salary_after_3.5_years exists\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check if person exists\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check start_qa_salary value\", function () {\r",
							"    pm.expect(resp.start_qa_salary).eql(req_salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_6_months value\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).eql(req_salary*2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_12_months value\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).eql(req_salary*2.7)\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_1.5_year value\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).eql(req_salary*3.3); \r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_3.5_years value\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).eql(req_salary*3.8); \r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check u_name[1] value\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).eql(req_salary); \r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"Check u_age value\", function () {\r",
							"    pm.expect(resp.person.u_age).eql(req_age); \r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Check u_salary_5_years value\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).eql(req_salary*4.2); \r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(\"Loop result:\")\r",
							"for (i in resp.person) {\r",
							"    console.log(resp.person[i])\r",
							"}\r",
							"\r",
							"\r",
							"for (var key in resp.person) {\r",
							"    console.log(key + \": \" + resp.person[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_2",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}